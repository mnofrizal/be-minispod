// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// User model for authentication and customer management
model User {
    id        String   @id @default(cuid())
    email     String   @unique
    password  String
    name      String
    role      UserRole @default(USER)
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    subscriptions       Subscription[]
    webhooks            Webhook[]
    balance             UserBalance?
    topUpTransactions   TopUpTransaction[]
    invoices            Invoice[]
    balanceTransactions BalanceTransaction[] // To be deprecated
    transactions        Transaction[]

    @@map("users")
}

// Service catalog - available services with variants/plans (N8N Basic/Plus/Pro, etc.)
model ServiceCatalog {
    id          String  @id @default(cuid())
    name        String // Base service name: "n8n", "ghost", "wordpress"
    displayName String // Service display name: "N8N Workflow Automation"
    description String
    version     String  @default("latest")
    isActive    Boolean @default(true)

    // NEW: Variant/Plan fields
    variant            String // "basic", "plus", "pro", "standard"
    variantDisplayName String // "Basic Plan", "Plus Plan", "Pro Plan"
    sortOrder          Int     @default(1) // For ordering variants
    isDefaultVariant   Boolean @default(false) // Mark default plan

    // Resource specifications (per variant)
    cpuRequest String @default("0.25") // 0.25 vCPU
    cpuLimit   String @default("1") // 1 vCPU
    memRequest String @default("512Mi") // 512MB
    memLimit   String @default("1Gi") // 1GB

    // Pricing (per variant)
    monthlyPrice Decimal @default(0) // Can be different per variant

    // Quota management
    availableQuota Int @default(-1) // -1 = unlimited, 0+ = limited quota

    // Template configuration
    dockerImage     String
    containerPort   Int    @default(80)
    environmentVars Json? // Environment variables as JSON

    // NEW: Service metadata
    category String? // "automation", "cms", "database", "analytics"
    tags     String[] // ["workflow", "automation", "integration"]
    icon     String? // Icon URL or identifier
    features String[] // ["1 vCPU", "1GB RAM", "Basic Support"]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    subscriptions Subscription[]

    // NEW: Composite unique constraint for name + variant
    @@unique([name, variant])
    @@map("service_catalog")
}

// Customer subscriptions
model Subscription {
    id        String             @id @default(cuid())
    userId    String
    serviceId String
    status    SubscriptionStatus @default(ACTIVE)

    // Subscription lifecycle
    startDate DateTime @default(now())
    expiresAt DateTime // 30 days from start

    // Service instance details
    subdomain String? @unique // customer-id.service.domain.com

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
    service                  ServiceCatalog            @relation(fields: [serviceId], references: [id])
    serviceInstance          ServiceInstance?
    subscriptionTransactions SubscriptionTransaction[]
    usageMetrics             UsageMetric[]
    invoice                  Invoice?

    @@map("subscriptions")
}

// Running service instances (pods)
model ServiceInstance {
    id             String @id @default(cuid())
    subscriptionId String @unique

    // Kubernetes details
    podName   String    @unique
    namespace String
    status    PodStatus @default(PENDING)

    // Access details
    internalUrl String? // Internal cluster URL
    externalUrl String? // Public access URL
    credentials Json? // Generated credentials as JSON

    // Resource allocation
    cpuAllocated String @default("1") // 1 vCPU
    memAllocated String @default("1Gi") // 1GB

    // Health monitoring fields
    lastHealthCheck DateTime?
    lastStatusSync  DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

    @@map("service_instances")
}

// Usage metrics for billing and monitoring
model UsageMetric {
    id             String @id @default(cuid())
    subscriptionId String

    // Metrics
    cpuUsage     Decimal @default(0) // CPU usage in cores
    memUsage     Decimal @default(0) // Memory usage in MB
    storageUsage Decimal @default(0) // Storage usage in MB
    networkIn    Decimal @default(0) // Network ingress in MB
    networkOut   Decimal @default(0) // Network egress in MB

    // Timestamp
    recordedAt DateTime @default(now())

    // Relations
    subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

    @@map("usage_metrics")
}

// Subscription-specific transaction history (renamed from Transaction)
model SubscriptionTransaction {
    id             String @id @default(cuid())
    subscriptionId String

    // Transaction details
    type        SubscriptionTransactionType
    amount      Decimal                       @default(0)
    currency    String                        @default("IDR")
    status      SubscriptionTransactionStatus @default(PENDING)
    description String?

    // Payment gateway details
    paymentId     String? // External payment ID
    paymentMethod String? // e.g., "credit_card", "bank_transfer"

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

    @@map("subscription_transactions")
}

// Unified Transaction model for frontend billing page
model Transaction {
    id          String            @id @default(cuid())
    userId      String
    type        TransactionType   @default(TOPUP)
    status      TransactionStatus @default(PENDING)
    description String
    amount      Decimal           @db.Decimal(10, 2)
    currency    String            @default("IDR")

    // Reference to related entities
    referenceId   String? // Links to TopUpTransaction or Subscription ID
    referenceType String? // "TOPUP" or "SUBSCRIPTION"

    // Payment gateway details
    paymentGateway String? @default("midtrans") // "midtrans", "manual", etc.
    paymentMethod  String? // "credit_card", "bank_transfer", etc.

    // Invoice relation
    invoiceId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    invoice Invoice? @relation(fields: [invoiceId], references: [id])

    @@map("transactions")
}

// Webhook configurations
model Webhook {
    id     String @id @default(cuid())
    userId String

    // Webhook details
    url      String
    events   String[] // Array of event types to listen for
    secret   String // HMAC secret for signature validation
    isActive Boolean  @default(true)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    deliveries WebhookDelivery[]

    @@map("webhooks")
}

// Webhook delivery tracking
model WebhookDelivery {
    id        String @id @default(cuid())
    webhookId String

    // Delivery details
    eventType    String
    payload      Json
    status       WebhookStatus @default(PENDING)
    attempts     Int           @default(0)
    lastAttempt  DateTime?
    responseCode Int?
    responseBody String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    webhook Webhook @relation(fields: [webhookId], references: [id], onDelete: Cascade)

    @@map("webhook_deliveries")
}

// Worker nodes information (for monitoring)
model WorkerNode {
    id        String @id @default(cuid())
    name      String @unique // "worker-1", "worker-2"
    hostname  String @unique
    ipAddress String

    // Node Specifications
    architecture    String @default("amd64") // "amd64", "arm64"
    operatingSystem String @default("linux")

    // Hardware Resources
    cpuCores        Int // Total CPU cores
    cpuArchitecture String // "Ryzen 6900HS", "Intel i7 Gen7"
    totalMemory     String // "32Gi", "64Gi"
    totalStorage    String // Available storage

    // Resource Allocation
    allocatedCPU     String @default("0") // Currently allocated CPU
    allocatedMemory  String @default("0") // Currently allocated memory
    allocatedStorage String @default("0") // Currently allocated storage

    // Capacity Management
    maxPods     Int @default(30) // Maximum pods per node
    currentPods Int @default(0) // Current pod count

    // Node Status
    status        NodeStatus @default(PENDING)
    isReady       Boolean    @default(false)
    isSchedulable Boolean    @default(true)

    // Health & Monitoring
    lastHeartbeat   DateTime?
    lastHealthCheck DateTime?

    // Kubernetes Labels and Taints
    labels Json? // Node labels as JSON
    taints Json? // Node taints as JSON

    // Additional Metadata
    kubeletVersion   String? // Kubernetes version
    containerRuntime String? // "containerd", "docker"
    kernelVersion    String?
    osImage          String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("worker_nodes")
}

// User balance management
model UserBalance {
    id        String   @id @default(cuid())
    userId    String   @unique
    balance   Decimal  @default(0) @db.Decimal(10, 2)
    currency  String   @default("IDR")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("user_balances")
}

// Top-up transactions with Midtrans integration
model TopUpTransaction {
    id       String      @id @default(cuid())
    userId   String
    amount   Decimal     @db.Decimal(10, 2)
    currency String      @default("IDR")
    status   TopUpStatus @default(PENDING)

    // Midtrans integration fields
    orderId       String  @unique // Midtrans order ID
    snapToken     String? // Midtrans Snap token
    paymentType   String? // credit_card, bank_transfer, etc.
    transactionId String? // Midtrans transaction ID

    // Payment details
    paidAt    DateTime?
    expiredAt DateTime // Payment expiry (24 hours)

    // Midtrans response data
    midtransData Json? // Store full Midtrans response

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    invoice Invoice?

    @@map("topup_transactions")
}

// Invoice generation for top-ups and subscriptions
model Invoice {
    id            String      @id @default(cuid())
    invoiceNumber String      @unique // INV-2024-001
    userId        String
    type          InvoiceType // TOPUP, SUBSCRIPTION

    // Invoice details
    amount   Decimal       @db.Decimal(10, 2)
    currency String        @default("IDR")
    status   InvoiceStatus @default(DRAFT)

    // Reference IDs
    topUpTransactionId String? @unique
    subscriptionId     String? @unique

    // Invoice metadata
    description String
    dueDate     DateTime
    paidAt      DateTime?

    // PDF generation
    pdfPath       String? // Path to generated PDF
    downloadCount Int     @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    topUpTransaction TopUpTransaction? @relation(fields: [topUpTransactionId], references: [id])
    subscription     Subscription?     @relation(fields: [subscriptionId], references: [id])
    transactions     Transaction[] // Link to unified transactions

    @@map("invoices")
}

// Balance transaction history
model BalanceTransaction {
    id            String                 @id @default(cuid())
    userId        String
    type          BalanceTransactionType
    amount        Decimal                @db.Decimal(10, 2)
    balanceBefore Decimal                @db.Decimal(10, 2)
    balanceAfter  Decimal                @db.Decimal(10, 2)
    description   String

    // Reference IDs
    topUpTransactionId String?
    subscriptionId     String?

    createdAt DateTime @default(now())

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("balance_transactions")
}

// Enums
enum UserRole {
    USER
    ADMINISTRATOR
}

enum TopUpStatus {
    PENDING
    PAID
    EXPIRED
    CANCELLED
    FAILED
}

enum InvoiceType {
    TOPUP
    SUBSCRIPTION
}

enum InvoiceStatus {
    DRAFT
    SENT
    PAID
    OVERDUE
    CANCELLED
}

enum BalanceTransactionType {
    CREDIT // Top-up
    DEBIT // Subscription purchase
    REFUND // Refund credit
    ADJUSTMENT // Manual adjustment
}

enum SubscriptionStatus {
    PENDING_DEPLOYMENT
    ACTIVE
    EXPIRED
    CANCELLED
    SUSPENDED
}

enum PodStatus {
    PENDING
    RUNNING
    FAILED
    SUCCEEDED
    UNKNOWN
}

// New unified transaction enums
enum TransactionType {
    TOPUP // User top-up balance
    SERVICE_PURCHASE // User purchases/subscribes to a service
    REFUND // Refund to user
    ADJUSTMENT // Manual adjustment
}

enum TransactionStatus {
    PENDING // Waiting for payment/processing
    SUCCESS // Successfully completed
    FAILED // Failed to process
    CANCELLED // Cancelled by user or system
    EXPIRED // Payment expired
}

// Subscription-specific transaction enums (renamed from original)
enum SubscriptionTransactionType {
    SUBSCRIPTION
    RENEWAL
    REFUND
    CREDIT
}

enum SubscriptionTransactionStatus {
    PENDING
    COMPLETED
    FAILED
    CANCELLED
}

enum WebhookStatus {
    PENDING
    DELIVERED
    FAILED
    RETRYING
}

enum NodeStatus {
    PENDING
    ACTIVE
    INACTIVE
    MAINTENANCE
    NOT_READY
}
