### Worker Node Management API Tests
### Kubernetes-Integrated Worker Management
### All endpoints provide real-time cluster data

@baseUrl = http://localhost:3000/api/v1
@adminToken = {{login_response.response.body.data.tokens.accessToken}}

### Login to get access token
# @name login_response
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "admin@paas.com",
  "password": "Admin123!@#"
}
### =============================================================================
### CLUSTER MANAGEMENT
### =============================================================================

### Sync cluster state with database
POST {{baseUrl}}/workers/sync
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### Get real-time cluster statistics
GET {{baseUrl}}/workers/stats
Authorization: Bearer {{adminToken}}

### =============================================================================
### WORKER NODE QUERIES (Real-time Kubernetes data)
### =============================================================================

### Get all worker nodes with live Kubernetes data
GET {{baseUrl}}/workers
Authorization: Bearer {{adminToken}}

### Get all worker nodes with pagination
GET {{baseUrl}}/workers?page=1&limit=5
Authorization: Bearer {{adminToken}}

### Get worker nodes with filters
GET {{baseUrl}}/workers?status=ACTIVE&isReady=true&isSchedulable=true
Authorization: Bearer {{adminToken}}

### Search worker nodes
GET {{baseUrl}}/workers?search=worker&sortBy=name&sortOrder=asc
Authorization: Bearer {{adminToken}}

### Get online worker nodes (from live cluster)
GET {{baseUrl}}/workers/online
Authorization: Bearer {{adminToken}}

### Get offline worker nodes (from live cluster)
GET {{baseUrl}}/workers/offline
Authorization: Bearer {{adminToken}}

### =============================================================================
### INDIVIDUAL WORKER NODE OPERATIONS
### =============================================================================

### Get worker node by ID with live Kubernetes data
GET {{baseUrl}}/workers/cmdg67pz
Authorization: Bearer {{adminToken}}

### Get worker node by name with live Kubernetes data
GET {{baseUrl}}/workers/i6700
Authorization: Bearer {{adminToken}}

### =============================================================================
### KUBERNETES NODE OPERATIONS
### =============================================================================

### Cordon node (make unschedulable)
POST {{baseUrl}}/workers/k3d-paas-cluster-agent-0/cordon
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### Uncordon node (make schedulable)
POST {{baseUrl}}/workers/k3d-paas-cluster-agent-0/uncordon
Authorization: Bearer {{adminToken}}
Content-Type: application/json

### Drain node (evict all pods)
POST {{baseUrl}}/workers/k3d-paas-cluster-agent-0/drain
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "gracePeriodSeconds": 30,
  "timeout": 300,
  "force": false,
  "deleteLocalData": false
}

### Drain node with force (for testing)
POST {{baseUrl}}/workers/k3d-paas-cluster-agent-0/drain
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "gracePeriodSeconds": 10,
  "timeout": 120,
  "force": true,
  "deleteLocalData": true
}

### =============================================================================
### TESTING SCENARIOS
### =============================================================================

### Test 1: Full cluster sync and stats
POST {{baseUrl}}/workers/sync
Authorization: Bearer {{adminToken}}

###
GET {{baseUrl}}/workers/stats
Authorization: Bearer {{adminToken}}

### Test 2: Node management workflow
# 1. Get all nodes
GET {{baseUrl}}/workers
Authorization: Bearer {{adminToken}}

###
# 2. Get specific node details
GET {{baseUrl}}/workers/i6700
Authorization: Bearer {{adminToken}}

###
# 3. Cordon the node
POST {{baseUrl}}/workers/k3d-paas-cluster-agent-0/cordon
Authorization: Bearer {{adminToken}}

###
# 4. Check online/offline status
GET {{baseUrl}}/workers/online
Authorization: Bearer {{adminToken}}

###
GET {{baseUrl}}/workers/offline
Authorization: Bearer {{adminToken}}

###
# 5. Uncordon the node
POST {{baseUrl}}/workers/k3d-paas-cluster-agent-0/uncordon
Authorization: Bearer {{adminToken}}

### Test 3: Search and filter functionality
GET {{baseUrl}}/workers?search=agent&isSchedulable=true
Authorization: Bearer {{adminToken}}

###
GET {{baseUrl}}/workers?status=ACTIVE&sortBy=name&sortOrder=desc
Authorization: Bearer {{adminToken}}

### Test 4: Real-time data validation
# Get live cluster data
GET {{baseUrl}}/workers
Authorization: Bearer {{adminToken}}

###
# Sync cluster state
POST {{baseUrl}}/workers/sync
Authorization: Bearer {{adminToken}}

###
# Verify data is updated
GET {{baseUrl}}/workers/stats
Authorization: Bearer {{adminToken}}

### =============================================================================
### ERROR TESTING
### =============================================================================

### Test non-existent node
GET {{baseUrl}}/workers/non-existent-node
Authorization: Bearer {{adminToken}}

### Test cordon non-existent node
POST {{baseUrl}}/workers/non-existent-node/cordon
Authorization: Bearer {{adminToken}}

### Test without authentication
GET {{baseUrl}}/workers

### Test with invalid token
GET {{baseUrl}}/workers
Authorization: Bearer invalid-token

### =============================================================================
### PERFORMANCE TESTING
### =============================================================================

### Large page size test
GET {{baseUrl}}/workers?limit=100
Authorization: Bearer {{adminToken}}

### Complex filter test
GET {{baseUrl}}/workers?status=ACTIVE&isReady=true&isSchedulable=true&search=k3d&sortBy=cpuCores&sortOrder=desc
Authorization: Bearer {{adminToken}}

### =============================================================================
### NOTES
### =============================================================================

# This API now provides:
# 1. Real-time Kubernetes cluster data
# 2. Automatic database synchronization
# 3. Live node status and resource information
# 4. Kubernetes node operations (cordon/uncordon/drain)
# 5. No manual node creation/deletion (managed by K8s)
# 6. Enhanced filtering and search capabilities
# 7. Production-ready cluster management

# Key differences from legacy API:
# - All data is live from Kubernetes cluster
# - No manual CRUD operations on nodes
# - Kubernetes-native operations (cordon/drain)
# - Real-time resource allocation tracking
# - Automatic node discovery and sync